#!/usr/bin/env false bash

#*# dot_functions

if [ -z "${DOT_CORE_DIR+set}" ]; then
  DOT_CORE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)"
fi

source "${DOT_CORE_DIR}/external/vsi_common/linux/string_tools.bsh"
source "${DOT_CORE_DIR}/external/vsi_common/linux/compat.bsh"
source "${DOT_CORE_DIR}/external/vsi_common/linux/versions.bsh"
source "${DOT_CORE_DIR}/external/vsi_common/linux/requirements.bsh"
source "${DOT_CORE_DIR}/external/vsi_common/linux/aliases.bsh"

#**
# =============
# Dot Functions
# =============
#
# .. default-domain:: bash
#
# .. file:: dot_functions.bsh
#
# A set of support functions to help make writing dot custom scripts easier, with out introducing additional dependencies.
#
# Most of these function are to assist in writing custom script without having to add extra work for you or learn a lot of bash.
#
# .. function:: symlink
#
# Cross OS function for creating a symlink
#
# On windows, either admin privileges are needed, or (less preferred) windows has to be put in a "Developer mode" (by an admin, of course)
#
# :Arguments: * ``$1`` - Source filename
#             * ``$2`` - Filename of the symlink to be created
#**
function symlink()
{
  # $1 Source file
  # $2 target symlink name

  if [ "${OS-}" = "Windows_NT" ] && [ -z "${FORCE_LN+set}" ]; then
    cmd //c mklink "$(cygpath -w "${2}")" "$(cygpath -w "${1}")"
  else
    ln -s "${1}" "${2}"
  fi
}

#**
# .. function:: backup_and_replace
#
# **Internal function:** The main function that replaces existing files in your home directory with a symlink in your dot files repo.
#
# If a file already exists and is not already a symlink, then it is copied to :envvar:`DOT_BACKUP_DIR`, mimicking the same directory structure as in your home directory.
#
# If the file has already been backed up once, and needs to be backed up again, then an extra `.#` extension is added (counting up from 0) is added. This could be because an external influences replaced the symlink with a file, or on Windows when symlinks could not be used.
#**
# TODO: Make it check for uniqueness, to prevent extra copies, especially on Windows without admin access
function backup_and_replace()
{
  local new_file="${1}"
  local target="${2}"
  local backup_file="${3}"

  if [ -n "${DOT_SKIP_SYMLINK+set}" ]; then
    return
  fi

  # even if its a bad symlink, -L returns true (-e does not)
  if [ -L "${target}" ]; then
    rm "${target}"
  # stash old dotfiles
  elif [ -e "${target}" ]; then
    mkdir -p "$(dirname "${backup_file}")"
    local -i backup_index
    while [ -e "${backup_file}${backup_index+.${backup_index}}" ]; do
      backup_index+=1
    done
    mv "${target}" "${backup_file}${backup_index+.${backup_index}}"
  fi

  mkdir -p "$(dirname "${target}")"

  # create new symbolic links
  symlink "${new_file}" "${target}"
}

#**
# .. function:: load_dot_env
#
# **Internal function:** Load and exports the `dot.env` files
#**
function load_dot_env()
{
  set -a

  DOT_OS=linux
  if [ "${OS-}" = "Windows_NT" ]; then
    DOT_OS=windows
  elif [[ ${OSTYPE-} = darwin* ]]; then
    DOT_OS=macos
  fi

  for files_dir in "${DOT_DIR}" "${DOT_DIR}/additional_dots"/* "${DOT_CORE_DIR}"; do
    if [ -r "${files_dir}/dot.env" ]; then
      source "${files_dir}/dot.env"
    fi
  done
  set +a
}

#**
# .. function:: add_if
#
# When trying to write a custom script to modify configuration files, you will run into situations where you will want to add a block of code if a string doesn't already exist in the file. There are several corner cases to cover here, does the files exist, does it already end in a newline, etc... This function will add a string if the condition is not met, guaranteeing it is not combine with the last line of the file and make sure the files ends in a newline if the file is modified.
#
# :Arguments: * ``$1`` - Filename of the file to be modified
#             * ``$2`` - Regex condition that must not match any line in the file for the line to be added. Set to empty string to always add the line. Must not contain newlines.
#             * ``$3`` - Target string to add. May contain newlines.
#
# .. rubric:: Example
#
# .. code:: bash
#
#    add_if ~/.bashrc '\.personal\.bashrc' \
#    'if [ -r ~/.personal.bashrc ]; then
#      . ~/.personal.bashrc
#    fi'
#**
function add_if()
{
  if [ "${2}" = "" ] || ! grep -q "${2}" "${1}" &> /dev/null; then
    if [ -s "${1}" ]; then
      # append to end of the file, always makes it its own line, and always
      # ends with a newline
      sed "${sed_flags_i[@]}" '$r/dev/stdin' "${1}" <<< "${3}"
    else
      # Sed doesn't work on empty files
      echo "${3}" > "${1}"
    fi
  fi
}

#**
# .. function:: add_after_if
#
# When trying to write a custom script to modify configuration files, you will run into situations where you need to add a configuration line, after another line (such as a header). There are several corner cases to cover here, what if the "prior line" doesn't already exist and needs to be added? What if the target line has already been added, it shouldn't be added twice. This function handles all of that for you, so that you can just focusing on making sure you added the target line after the prior line
#
# :Arguments: * ``$1`` - Filename of the file to be modified
#             * ``$2`` - Prior line to add ``$3`` after. Must not contain newlines.
#             * ``$3`` - Target string to add. Must not contain newlines.
#
# .. rubric:: Example
#
# In this example, we want to:
#
# * Always add ``path = ~/.default.gitconfig`` after ``[include]``
# * Add ``path = ~/.2.11.4.gitconfig`` after ``[include]``, but only if git is version 2.11.4 or newer
# * Add ``path = ~/.windows.gitconfig`` after ``[include]``, but only if running on Windows
#
# .. code:: bash
#
#    # git/config
#    add_after_if ~/.gitconfig "[include]" "  path = ~/.default.gitconfig"
#
#    source "${DOT_CORE_DIR}/external/vsi_common/linux/requirements.bsh"
#    source "${DOT_CORE_DIR}/external/vsi_common/linux/versions.bsh"
#    if meet_requirements "$(git_version)" '>=2.11.4'; then
#      add_after_if ~/.gitconfig "[include]" "  path = ~/.2.11.4.gitconfig"
#    fi
#
#    if [ "${OS-}" = "Windows_NT" ]; then
#      add_after_if ~/.gitconfig "[include]" "  path = ~/.windows.gitconfig"
#    fi
#**
function add_after_if()
{
  # If line already exists, then do nothing
  if ! grep -q "${3}" "${1}" &> /dev/null; then
    local before_line="^$(regex_escape "${2}")"
    # Make sure the prior line exists
    add_if "${1}" "${before_line}" "${2}"
    sed "${sed_flags_i[@]}" "s|${before_line}.*|&"$'\\\n'"${3}|" "${1}"
  fi
}

#**
# .. function:: validate_ssh_key
#
# Check to see if an SSH key had a passphrase on it. If it does not, delete the file so that it cannot be used.
#
# SSH keys should not be passphraseless, that's what ssh agent is for. This function is used to enforce that.
#
# :Arguments: * ``$1`` - Path of ssh key
#**
function validate_ssh_key()
{
  if "${DOT_GIT_SSH_KEY_GEN}" -y -P "" -f "${1}" &> /dev/null; then
    if grep -q "-----BEGIN OPENSSH PRIVATE KEY-----" "${1}" &> /dev/null; then
      rm "${1}"
    else
      echo "Warning: The file \"${1}\" does not appear to be an ssh key"
      echo "it's been renamed to \"${1}.delete_me\""
      mv "${1}" "${1}.delete_me"
    fi
    echo "You did not enter a passphrase, this isn't secure. Try again" >&2
    return 2
  fi
}

#**
# .. function:: gpg_key_batch
#
# Some good (I hope?) defaults for generating GPG keys. If you want to override this, just define your own :func:`gpg_key_batch`. See https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html for more information
#
# :Arguments: * ``$1`` - Real Name/Comment
#             * ``$2`` - Email address
#**
function gpg_key_batch()
{
  cat - << EOF
Key-Type: RSA
Key-Length: 4096
Subkey-Type: RSA
Subkey-Length: 4096
Subkey-Usage: sign encrypt auth
Expire-Date: 5y
Name-Real: ${1}
Name-Comment: ${1}
Name-Email: ${2}
EOF

  if meet_requirements "${gpg2_version-$(gpg_version)}" '>=2.1'; then
    echo "Key-Usage: cert"
    echo "%no-protection"
  else
    echo "Key-Usage: sign"
    # 2.0 can't have no-protection, but also doesn't need it, the passphrase
    # will be blank by default
  fi
}

#**
# .. function:: gen_gpg_key
#
# Generate a gpg key based on :func:`gpg_key_batch`. While the passphase is initially unset, it will have you change it.
#
# (GPG 2.1 or newer) It will check to see if an GPG key had a passphrase on it. If it does not, the key is **automatically** deleted. GPG keys should not be passphraseless, that's what gpg agent is for.
#
# :Arguments: * ``$1`` - Real name (also used for comment)
#             * ``$2`` - Email address
#
# .. note::
#
#    Only tested against GPG 2.0 or 2.1, that was hard enough
#**
function gen_gpg_key()
{
  source "${VSI_COMMON_DIR}/linux/colors.bsh"

  local gpg2_version="$(gpg_version)"

  # works on rhel/centos/fedora, because it uses this
  # http://prod-exe.icecube.wisc.edu/python/python2.6.Linux-x86_64.gcc-4.4.4/bin/pinentry
  local PINENTRY_BINARY
  PINENTRY_BINARY="$(command -v pinentry-tty 2> /dev/null)" || :
  if [ -z "${PINENTRY_BINARY:+set}" ]; then
    PINENTRY_BINARY="$(command -v pinentry-curses 2> /dev/null)" || :
  fi

  if [ -n "${PINENTRY_BINARY:+set}" ]; then
    export PINENTRY_BINARY

    if meet_requirements "${gpg2_version}" '>=2.1'; then
      gpgconf --kill gpg-agent || :
    else
      gpg-connect-agent killagent /bye || :
    fi
  fi

  local fingerprint=$(gpg_key_batch "${1}" "${2}" | gpg2 --status-fd 1 --gen-key --batch)
  if [[ ${fingerprint} =~ KEY_CREATED\ .\ ([a-fA-F0-9]{40}) ]]; then
    fingerprint="${BASH_REMATCH[1]}"
  else
    echo "Something went wrong:"
    declare -p fingerprint
    return 1
  fi

  if meet_requirements "${gpg2_version}" '>=2.1'; then
    echo
    echo "${YELLOW}GPG 2.1 may have you set your primary key passphrase first, then it"
    echo "  will let you set you subkey passphrase. You ${ITALIC}can${RESET_ITALIC} use the same passphrase.${RESET}"
    echo
  fi

  if ! gpg2 --passwd "${fingerprint}"; then
    echo "You did not change the password"
    echo "You probably didn't enter the original password (which was blank) correctly"
    echo "Please try again"
    gpg2 --batch --yes --delete-secret-key "${fingerprint}"
    gpg2 --batch --yes --delete-key "${fingerprint}"
    return 1
  fi

  if meet_requirements "${gpg2_version}" '>=2.1'; then
    # Nothing should get exported successfully. This is the best way to test if primary or sub key is unprotected
    if [ "$(gpg2 --pinentry-mode loopback --export-secret-keys --passphrase '' --armor "${fingerprint}" 2>/dev/null)" != "" ]; then
      echo "GPG key \"${fingerprint}\" is insecure, now deleting..."
      gpg2 --batch --yes --delete-secret-key "${fingerprint}"
      gpg2 --batch --yes --delete-key "${fingerprint}"
      return 1
    fi
  else
    #Changing the expiration does require a password, and will fail
    if printf "key 0\nexpire\n0\n" | gpg2 --command-fd 0 --batch --edit-key "${fingerprint}" &> /dev/null ||
       printf "key 1\nexpire\n0\n" | gpg2 --command-fd 0 --batch --edit-key "${fingerprint}" &> /dev/null; then
      echo "GPG key \"${fingerprint}\" is insecure, now deleting..."
      gpg2 --batch --yes --delete-secret-key "${fingerprint}"
      gpg2 --batch --yes --delete-key "${fingerprint}"
      return 1
    fi
  fi

  # restart gpg agent again, so it can be normal
  if meet_requirements "${gpg2_version}" '>=2.1'; then
    gpgconf --kill gpg-agent || :
  else
    gpg-connect-agent killagent /bye || :
  fi
}
