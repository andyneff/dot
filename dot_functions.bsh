#!/usr/bin/env false bash

#*# dot_functions

source "${SCRIPT_DIR}/external/vsi_common/linux/string_tools.bsh"

#**
# =============
# Dot Functions
# =============
#
# .. default-domain:: bash
#
# .. file:: dot_functions.bsh
#
# A set of support functions to help make writing dot custom scripts easier, with out introducing additional dependencies.
#
# Most of these function are to assist in writing custom script without having to add extra work for you or learn a lot of bash.
#
# .. function:: symlink
#
# Cross OS function for creating a symlink
#
# On windows, either admin privileges are needed, or (less preferred) windows has to be put in a "Developer mode" (by an admin, of course)
#
# :Arguments: * ``$1`` - Source filename
#             * ``$2`` - Filename of the symlink to be created
#**
function symlink()
{
  # $1 Source file
  # $2 target symlink name

  if [ "${OS-}" = "Windows_NT" ] && [ -z "${FORCE_LN+set}" ]; then
    cmd //c mklink "$(cygpath -w "${2}")" "$(cygpath -w "${1}")"
  else
    ln -s "${1}" "${2}"
  fi
}

#**
# .. function:: backup_and_replace
#
# **Internal function:** The main function that replaces existing files in your home directory with a symlink in your dot files repo.
#
# If a file already exists and is not already a symlink, then it is copied to :envvar:`DOT_BACKUP_DIR`, mimicking the same directory structure as in your home directory.
#
# If the file has already been backed up once, and needs to be backed up again, then an extra `.#` extension is added (counting up from 0) is added. This could be because an external influences replaced the symlink with a file, or on Windows when symlinks could not be used.
#**
# TODO: Make it check for uniqueness, to prevent extra copies, especially on Windows without admin access
function backup_and_replace()
{
  local new_file="${1}"
  local target="${2}"
  local backup_file="${3}"

  if [ -n "${DOT_SKIP_SYMLINK+set}" ]; then
    return
  fi

  # even if its a bad symlink, -L returns true (-e does not)
  if [ -L "${target}" ]; then
    rm "${target}"
  # stash old dotfiles
  elif [ -e "${target}" ]; then
    mkdir -p "$(dirname "${backup_file}")"
    local -i backup_index
    while [ -e "${backup_file}${backup_index+.${backup_index}}" ]; do
      backup_index+=1
    done
    mv "${target}" "${backup_file}${backup_index+.${backup_index}}"
  fi

  mkdir -p "$(dirname "${target}")"

  # create new symbolic links
  symlink "${new_file}" "${target}"
}

#**
# .. function:: load_dot_env
#
# **Internal function:** Load and exports the `dot.env` files
#**
function load_dot_env()
{
  set -a
  for files_dir in "${DOT_DIR}" "${DOT_DIR}/additional_dots"/* "${SCRIPT_DIR}/dot.env"; do
    if [ -r "${files_dir}/dot.env" ]; then
      source "${files_dir}/dot.env"
    fi
  done
  set +a
}

#**
# .. function:: add_if
#
# When trying to write a custom script to modify configuration files, you will run into situations where you will want to add a block of code if a string doesn't already exist in the file. There are several corner cases to cover here, does the files exist, does it already end in a newline, etc... This function will add a string if the condition is not met, guaranteeing it is not combine with the last line of the file and make sure the files ends in a newline if the file is modified.
#
# :Arguments: * ``$1`` - Filename of the file to be modified
#             * ``$2`` - Regex condition that must not match any line in the file for the line to be added. Set to empty string to always add the line. Must not contain newlines.
#             * ``$3`` - Target string to add. May contain newlines.
#
# .. rubric:: Example
#
# .. code:: bash
#
#    add_if ~/.bashrc '\.personal\.bashrc' \
#    'if [ -r ~/.personal.bashrc ]; then
#      . ~/.personal.bashrc
#    fi'
#**
function add_if()
{
  if [ "${2}" = "" ] || ! grep -q "${2}" "${1}" &> /dev/null; then
    if [ -s "${1}" ]; then
      # append to end of the file, always makes it its own line, and always
      # ends with a newline
      sed -i '$r/dev/stdin' "${1}" <<< "${3}"
    else
      # Sed doesn't work on empty files
      echo "${3}" > "${1}"
    fi
  fi
}

#**
# .. function:: add_after_if
#
# When trying to write a custom script to modify configuration files, you will run into situations where you need to add a configuration line, after another line (such as a header). There are several corner cases to cover here, what if the "prior line" doesn't already exist and needs to be added? What if the target line has already been added, it shouldn't be added twice. This function handles all of that for you, so that you can just focusing on making sure you added the target line after the prior line
#
# :Arguments: * ``$1`` - Filename of the file to be modified
#             * ``$2`` - Prior line to add ``$3`` after. Must not contain newlines.
#             * ``$3`` - Target string to add. Must not contain newlines.
#
# .. rubric:: example
#
#    In this example, we want to:
#
#    * Always add `path = ~/.default.gitconfig` after `[include]`
#    * Add `path = ~/.2.11.4.gitconfig` after `[include]`, but only if git is version 2.11.4 or newer
#    * Add `path = ~/.windows.gitconfig` after `[include]`, but only if running on Windows
#
# .. code:: bash
#
#    # git/config
#    add_after_if ~/.gitconfig "[include]" "  path = ~/.default.gitconfig"
#
#    source "${SCRIPT_DIR}/external/vsi_common/linux/requirements.bsh"
#    source "${SCRIPT_DIR}/external/vsi_common/linux/versions.bsh"
#    if meet_requirements "$(git_version)" '>=2.11.4'; then
#      add_after_if ~/.gitconfig "[include]" "  path = ~/.2.11.4.gitconfig"
#    fi
#
#    if [ "${OS-}" = "Windows_NT" ]; then
#      add_after_if ~/.gitconfig "[include]" "  path = ~/.windows.gitconfig"
#    fi
# **
function add_after_if()
{
  # If line already exists, then do nothing
  if ! grep -q "${3}" "${1}" &> /dev/null; then
    local before_line="^$(regex_escape "${2}")"
    # Make sure the prior line exists
    add_if "${1}" "${before_line}" "${2}"
    sed -i "s|${before_line}.*|&\n${3}|" "${1}"
  fi
}
