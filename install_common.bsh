#!/usr/bin/env bash

set -eu

if [ -z "${DOT_DIR+set}" ]; then
  echo "ERROR: DOT_DIR is not set. It looks like you tried to call this script directly." >&2
  echo "The intended use of this script is to be called by your dot files install.bsh" >&2
  echo "See: new_repos.bsh" >&2
  exit 2
fi

DOT_CORE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)"

# Help make git command happy
cd "${DOT_DIR}"

# 0. Dependencies
if ! command -v find &> /dev/null; then
  echo "Command \"find\" not found, please install find" >&2
  exit 2
fi

# 1. Make sure vsi_common is there
# if ! git config submodule.external/vsi_common.url &> /dev/null; then
pushd "${DOT_CORE_DIR}" &> /dev/null
  if [[ $(git submodule status external/vsi_common) =~ ^- ]]; then
    echo "Initializing vsi_common..." >&2
    git submodule update --recursive --init external/vsi_common
  fi
popd &> /dev/null


# 2. Load settings and modules
source "${DOT_CORE_DIR}/dot_functions.bsh"

load_dot_env

source "${DOT_CORE_DIR}/external/vsi_common/linux/dir_tools.bsh"
source "${DOT_CORE_DIR}/external/vsi_common/linux/web_tools.bsh"

# 3. Handle your git server ssh key
if [ -n "${DOT_GIT_SSH_KEY_GEN}" ] && [ ! -e "${DOT_GIT_SERVER_SSH_KEY}" ]; then
  echo "You do not have your git server ssh key setup. I will generate one for you" >&2
  "${DOT_GIT_SSH_KEY_GEN}" -t "${DOT_GIT_SSH_KEY_TYPE}" ${DOT_GIT_SSH_KEY_OTHER_ARGS[@]+"${DOT_GIT_SSH_KEY_OTHER_ARGS[@]}"} -f "${DOT_GIT_SERVER_SSH_KEY}"
  validate_ssh_key "${DOT_GIT_SERVER_SSH_KEY}"
  echo "Please add the following key to your Git Server:" >&2
  echo
  cat "${DOT_GIT_SERVER_SSH_KEY}.pub"
  echo
  read -sn 1 -p "Press any key to continue"
fi

# 4. Clone the rest of the submodules
if git submodule status | grep -e - &>/dev/null; then
  source "${DOT_CORE_DIR}/external/vsi_common/linux/requirements.bsh"
  source "${DOT_CORE_DIR}/external/vsi_common/linux/versions.bsh"
  if meet_requirements "$(git_version)" '>=2.1.0'; then
    GIT_SSH_COMMAND="ssh -i '${DOT_GIT_SERVER_SSH_KEY}' -F /dev/null" git submodule update --recursive --init
  else
    printf "#!/usr/bin/env sh\nssh -i '${DOT_GIT_SERVER_SSH_KEY}' -F /dev/null \"\${@}\"\n" > ~/.tmp_git_ssh
    chmod 755 ~/.tmp_git_ssh
    GIT_SSH=~/.tmp_git_ssh git submodule update --recursive --init
    rm ~/.tmp_git_ssh
  fi
fi

# 5. Issue warnings
if [ "${OS-}" = "Windows_NT" ] && [ -z "${FORCE_LN+set}" ]; then
  if ! "${SYSTEMROOT}/system32/whoami.exe" //groups | grep -q "S-1-5-32-544.*Enabled group"; then
    # In Windows, you need Admin for mklink (or Developer Mode)
    echo "You are not running with admin rights, mklink will probably fail" >&2
    echo "export \"DOT_SKIP_SYMLINK=1\" to skip the symlinks, or \"FORCE_LN=1\" to copy" >&2
  fi
fi

# 5.5 Simple download files (Todo: Document)
# Example:
# DOT_WINDOWS_DOWNLOAD_URLS=(https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe)
# DOT_LINUX_DOWNLOAD_URLS=(https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64)
# DOT_MACOS_DOWNLOAD_URLS=(https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64)
# DOT_DOWNLOAD_FILENAMES=(jq)

downloads=()
extension=''
case "${DOT_OS}" in
  windows)
    downloads=(${DOT_WINDOWS_DOWNLOAD_URLS[@]+"${DOT_WINDOWS_DOWNLOAD_URLS[@]}"})
    extension='.exe'
    ;;
  macos)
    downloads=(${DOT_MACOS_DOWNLOAD_URLS[@]+"${DOT_MACOS_DOWNLOAD_URLS[@]}"})
    ;;
  linux)
    downloads=(${DOT_LINUX_DOWNLOAD_URLS[@]+"${DOT_LINUX_DOWNLOAD_URLS[@]}"})
    ;;
esac

mkdir -p ~/bin

for index in "${!downloads[@]}"; do
  if [ -n "${downloads[index]}" ] && [ ! -x ~/bin/"${DOT_DOWNLOAD_FILENAMES[index]}${extension}" ]; then
    download_to_file "${downloads[index]}" ~/bin/"${DOT_DOWNLOAD_FILENAMES[index]}${extension}"
    chmod 755 ~/bin/"${DOT_DOWNLOAD_FILENAMES[index]}${extension}"
  fi
done

# 5.6 Simple archive downloads (Work in progress)
# example
# DOT_WINDOWS_ARCHIVE_DOWNLOAD_URLS=(https://github.com/sinbad/lfs-folderstore/releases/download/v1.0.1/lfs-folderstore-windows-amd64-v1.0.1.zip)
# DOT_MACOS_ARCHIVE_DOWNLOAD_URLS=(https://github.com/sinbad/lfs-folderstore/releases/download/v1.0.1/lfs-folderstore-darwin-amd64-v1.0.1.zip)
# DOT_LINUX_ARCHIVE_DOWNLOAD_URLS=(https://github.com/sinbad/lfs-folderstore/releases/download/v1.0.1/lfs-folderstore-linux-amd64-v1.0.1.zip)
# DOT_ARCHIVE_STRIP=(1)
# DOT_ARCHIVE_DESTINATIONS=(~/bin)
# DOT_ARCHIVE_DOWNLOAD_FILENAMES=(lfs-folderstore)

case "${DOT_OS}" in
  windows)
    downloads=(${DOT_WINDOWS_ARCHIVE_DOWNLOAD_URLS[@]+"${DOT_WINDOWS_ARCHIVE_DOWNLOAD_URLS[@]}"})
    extension='.exe'
    ;;
  macos)
    downloads=(${DOT_MACOS_ARCHIVE_DOWNLOAD_URLS[@]+"${DOT_MACOS_ARCHIVE_DOWNLOAD_URLS[@]}"})
    ;;
  linux)
    downloads=(${DOT_LINUX_ARCHIVE_DOWNLOAD_URLS[@]+"${DOT_LINUX_ARCHIVE_DOWNLOAD_URLS[@]}"})
    ;;
esac

function simple_download()
{
  if [ -n "${downloads[index]}" ] && [ ! -x ~/bin/"${DOT_ARCHIVE_DOWNLOAD_FILENAMES[index]}${extension}" ]; then
    temp_dir=$(mktemp -d)

    temp_download_filename="${temp_dir}/$(basename "${downloads[index]}")"
    temp_download_filename="${temp_download_filename%%\?*}"
    temp_download_filename="${temp_download_filename%%#*}"

    download_to_file "${downloads[index]}" "${temp_download_filename}"


    case "${temp_download_filename}" in
      *.zip)
        if command -v unzip &> /dev/null; then
          unzip -d "${temp_dir}/temp_extract" "${temp_download_filename}"
        else
          echo "Unzip isn't installed, skipping ${temp_download_filename}"
          rm -rf "${temp_dir}"
          return 0
        fi
        ;;
      *) # Just assume tar can take it
        mkdir "${temp_dir}/temp_extract"
        tar xvf "${temp_download_filename}" -C "${temp_dir}/temp_extract"
        ;;
    esac

    # temp_extract shouldn't be counted, so add one to depth)
    strip_copy "${temp_dir}/temp_extract" "${DOT_ARCHIVE_DESTINATIONS[index]}" $((${DOT_ARCHIVE_STRIP[index]}+1))

    chmod 755 ~/bin/"${DOT_ARCHIVE_DOWNLOAD_FILENAMES[index]}${extension}"

    rm -rf "${temp_dir}"
  fi
}

for index in "${!downloads[@]}"; do
  simple_download
done

# # 5.6 Advanced downloads (Work in progress)
# DOT_WINDOWS_ARCHIVE_DOWNLOAD_URLS=(https://github.com/sinbad/lfs-folderstore/releases/download/v1.0.1/lfs-folderstore-windows-amd64-v1.0.1.zip)
# DOT_MACOS_ARCHIVE_DOWNLOAD_URLS=(https://github.com/sinbad/lfs-folderstore/releases/download/v1.0.1/lfs-folderstore-darwin-amd64-v1.0.1.zip)
# DOT_LINUX_ARCHIVE_DOWNLOAD_URLS=(https://github.com/sinbad/lfs-folderstore/releases/download/v1.0.1/lfs-folderstore-linux-amd64-v1.0.1.zip)
# DOT_ARCHIVE_FOLDERS=('lfs-folderstore-*')
# DOT_ARCHIVE_DESTINATIONS=(~/bin)
# DOT_ARCHIVE_DOWNLOAD_FILENAMES=(lfs-folderstore)

# case "${DOT_OS}"
#   windows)
#     downloads=(${DOT_WINDOWS_ARCHIVE_DOWNLOAD_URLS[@]+"${DOT_WINDOWS_ARCHIVE_DOWNLOAD_URLS[@]}"})
#     extension='.exe'
#     ;;
#   macos)
#     downloads=(${DOT_MACOS_ARCHIVE_DOWNLOAD_URLS[@]+"${DOT_MACOS_ARCHIVE_DOWNLOAD_URLS[@]}"})
#     ;;
#   linux)
#     downloads=(${DOT_LINUX_ARCHIVE_DOWNLOAD_URLS[@]+"${DOT_LINUX_ARCHIVE_DOWNLOAD_URLS[@]}"})
#     ;;
# esac

# temp_dir=$(mktemp -d)

# for index in "${!downloads[@]}"; do
#   if [ -n "${downloads[index]}" ] && [ ! -x ~/bin/"${DOT_DOWNLOAD_FILENAMES[index]}${extension}" ]; then

#     temp_download_filename="${temp_dir}/$(basename "${downloads[index]}")"

#     download_to_file "${downloads[index]}" "${temp_download_filename}"

#     case "${temp_download_filename}"
#       *.zip)
#         unzip -d "${temp_dir}/temp_extract" "${temp_download_filename}"
#         mv "${temp_download_filename}"
#         unzip -d "$dest" "$zip" && f=("$dest"/*) && mv "$dest"/*/* "$dest" && rmdir "${f[@]}"

#       *) # Assume tar
#         tar -x
#         ;;
#     esac

#     #  ~/bin/"${DOT_DOWNLOAD_FILENAMES[index]}${extension}"


#     # chmod 755 ~/bin/"${DOT_DOWNLOAD_FILENAMES[index]}${extension}"
#   fi
# done

# 6. Install files!
for files_dir in "${DOT_DIR}" "${DOT_DIR}/additional_dots"/*; do
  if [ ! -d "${files_dir}" ]; then
    continue
  fi
  while IFS= read -r -d '' dotfile || [ -n "${dotfile}" ]; do
    path_part=$(relative_path "${dotfile}" "${files_dir}/files")
    backup_and_replace "${dotfile}" ~/"${path_part}" "${DOT_BACKUP_DIR}/${path_part}"
  done < <(find "${files_dir}/files" -type f -print0)

  if [ -r "${files_dir}/custom.bsh" ]; then
    unset setup
    source "${files_dir}/custom.bsh"
    # Make sure we don't accidentally run a command called setup
    if [ "$(type -t setup)" = "function" ]; then
      setup
    fi
  fi
done

chmod "${DOT_DIR_PERMISSIONS}" "${DOT_DIR}"

echo "Install complete" >&2
