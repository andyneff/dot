#!/usr/bin/env bash

set -eu

if [ -z "${DOT_DIR+set}" ]; then
  echo "ERROR: DOT_DIR is not set. It looks like you tried to call this script directly." >&2
  echo "The intended use of this script is to be called by your dot files install.bsh" >&2
  echo "See: new_repos.bsh" >&2
  exit 2
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)"

# 0. Dependencies
if ! command -v find &> /dev/null; then
  echo "Command \"find\" not found, please install find" >&2
  exit 2
fi

# 1. Make sure vsi_common is there
# if ! git config submodule.external/vsi_common.url &> /dev/null; then
pushd "${SCRIPT_DIR}" &> /dev/null
  if [[ $(git submodule status external/vsi_common) =~ ^- ]]; then
    echo "Initializing vsi_common..." >&2
    git submodule update --recursive --init external/vsi_common
  fi
popd &> /dev/null

# 2. Load settings and vsi modules
for files_dir in "${DOT_DIR}" "${DOT_DIR}/additional_dots"/*; do
  if [ -r "${files_dir}/dot.env" ]; then
    source "${files_dir}/dot.env"
  fi
done

source "${SCRIPT_DIR}/dot.env"
source "${SCRIPT_DIR}/external/vsi_common/linux/dir_tools.bsh"

# 3. Handle your git server ssh key
if [ -n "${DOT_GIT_SSH_KEY_GEN}" ] && [ ! -e "${DOT_GIT_SERVER_SSH_KEY}" ]; then
  echo "You do not have your git server ssh key setup. I will generate one for you" >&2
  "${DOT_GIT_SSH_KEY_GEN}" -t "${DOT_GIT_SSH_KEY_TYPE}" ${DOT_GIT_SSH_KEY_OTHER_ARGS[@]+"${DOT_GIT_SSH_KEY_OTHER_ARGS[@]}"} -f "${DOT_GIT_SERVER_SSH_KEY}"
  if "${DOT_GIT_SSH_KEY_GEN}" -y -P "" -f "${DOT_GIT_SERVER_SSH_KEY}" &> /dev/null; then
    rm "${DOT_GIT_SERVER_SSH_KEY}"
    echo "You did not enter a passphrase, this isn't secure. Try again" >&2
    exit 2
  fi
  echo "Please add the following key to your Git Server:" >&2
  echo
  cat "${DOT_GIT_SERVER_SSH_KEY}.pub"
  echo
  read -sn 1 -p "Press any key to continue"
fi

# 4. Clone the rest of the submodules
if git submodule status | grep -e - &>/dev/null; then
  source "${SCRIPT_DIR}/external/vsi_common/linux/requirements.bsh"
  source "${SCRIPT_DIR}/external/vsi_common/linux/versions.bsh"
  if meet_requirements "$(git_version)" '>=2.1.0'; then
    GIT_SSH_COMMAND="ssh -i '${DOT_GIT_SERVER_SSH_KEY}' -F /dev/null" git submodule update --recursive --init
  else
    printf "#!/usr/bin/env sh\nssh -i '${DOT_GIT_SERVER_SSH_KEY}' -F /dev/null \"\${@}\"\n" > ~/.tmp_git_ssh
    chmod 755 ~/.tmp_git_ssh
    GIT_SSH=~/.tmp_git_ssh git submodule update --recursive --init
    rm ~/.tmp_git_ssh
  fi
fi

# 5. Issue warnings
if [ "${OS-}" = "Windows_NT" ] && [ -z "${FORCE_LN+set}" ]; then
  if ! "${SYSTEMROOT}/system32/whoami.exe" //groups | grep -q "S-1-5-32-544.*Enabled group"; then
    # In Windows, you need Admin for mklink (or Developer Mode)
    echo "You are not running with admin rights, mklink will probably fail" >&2
    echo "export \"DOT_SKIP_SYMLINK=1\" to skip the symlinks, or \"FORCE_LN=1\" to copy" >&2
  fi
fi

# 6. Install files!
for files_dir in "${DOT_DIR}" "${DOT_DIR}/additional_dots"/*; do
  if [ ! -d "${files_dir}" ]; then
    continue
  fi
  while IFS= read -r -d '' dotfile || [ -n "${dotfile}" ]; do
    path_part=$(relative_path "${dotfile}" "${files_dir}/files")
    backup_and_replace "${dotfile}" ~/"${path_part}" "${DOT_BACKUP_DIR}/${path_part}"
  done < <(find "${files_dir}/files" -type f -print0)

  if [ -r "${files_dir}/custom.bsh" ]; then
    unset setup
    source "${files_dir}/custom.bsh"
    # Make sure we don't accidentally run a command called setup
    if [ "$(type -t setup)" = "function" ]; then
      setup
    fi
  fi
done

chmod "${DOT_DIR_PERMISSIONS}" "${DOT_DIR}"

echo "Install complete" >&2
